/*
 * Copyright 2011-2015 Numeric Technology
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System.Text;
using System.Linq;
using System.Collections.Generic;
using System;
using KPEntity.ORM;
using KPBO;
using Castle.ActiveRecord;
using KPBO.Parameters;
using KPCore.KPUtil;

namespace KPBO
{
    /// <summary>
    /// <para>Authors: Juliano Tiago Rinaldi and 
    /// Tiago Antonio Jacobi</para>
    /// </summary>
    public class FrwWindowBO : BaseBO<FrwWindow>
    {
        public FrwWindowBO(FrwWindow entity)
            : base(entity)
        {

        }

        public static List<string> GetEnumeratorWindow()
        {
            List<string> enumeratorsWindow = new List<string>();
            string namespaceEnum = FrwParametersHelper.GetValueParam<string>(FrwParamEnum.FRW_NAMESPACE_ENUM_WINDOW);
            if (!String.IsNullOrWhiteSpace(namespaceEnum))
            {
                Type enumType = KPGenericUtil.GetTypeByNamespace(namespaceEnum);

                if (enumType != null)
                {
                    var enumValues = Enum.GetNames(enumType);
                    enumeratorsWindow.Add(String.Empty);
                    enumeratorsWindow.AddRange(enumValues);
                }
            }

            return enumeratorsWindow;
        }

        /// <summary>
        /// This method is responsible for save and return the Entity,
        /// so if you need to save some extra data you could use this method.
        ///
        /// TODO: This method is Auto-generated by the KP Mapping Generator.
        /// </summary>
        /// <returns>The Entity saved in the database</returns>
        public override FrwWindow SaveEntity()
        {
            // Your code here

            return base.SaveEntity(); // Default framework SaveEntity, it call's the Validate method.
        }

        /// <summary>
        /// This method is responsible for save and return the Entity,
        /// so if you need to save some extra data you could use this method.
        ///
        /// TODO: This method is Auto-generated by the KP Mapping Generator.
        /// </summary>
        /// <returns>True if the Entity is validated and False if not, e.g: if some required field is empty, returns false.</returns>
        public override bool Validate()
        {
            // Your code here

            return base.Validate(); // Default framework validation.
        }
    }
}
